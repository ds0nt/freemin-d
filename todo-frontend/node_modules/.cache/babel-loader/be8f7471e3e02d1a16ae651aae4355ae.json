{"ast":null,"code":"var _jsxFileName = \"/Users/jaquelinecoelho/Desktop/good/habits-frontend/src/todos/ToDoCardList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport UserContext from \"../auth/UserContext\";\nimport ToDoCard from \"./ToDoCard\";\nimport todoApi from \"../api/api\"; // Show list of todo cards. habits= todos setHabits=set\n//  todoList -> todoCardList \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToDoCardList() {\n  _s();\n\n  const {\n    currentUser,\n    setCurrentUser\n  } = useContext(UserContext);\n  const [todos, setToDos] = useState(currentUser.habits);\n  const [checked, setChecked] = useState(false);\n  console.debug(\"ToDoCardList\", \"currentUser=\", currentUser, \"todos=\", currentUser.habits, \"checked=\", checked); // remove a habit\n\n  async function deleteHabitById(id) {\n    try {\n      await todoApi.removeHabit(id, currentUser.username);\n      currentUser.habits = currentUser.habits.filter(habit => +habit.id !== +id);\n      setCurrentUser(currentUser);\n      setToDos(currentUser.habits);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"habit deletion failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  } // check a habit\n\n\n  async function checkHabitById(id, data) {\n    try {\n      let res = await todoApi.checkHabit(id, currentUser.username, data);\n      console.log(\"res in checkHabitById func\", res);\n      let updatedHabitId = currentUser.habits.findIndex(habit => +habit.id === +id);\n      currentUser.habits[updatedHabitId] = res;\n      setCurrentUser(currentUser);\n      setChecked(!checked);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"todo check failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  let today = new Date().toISOString().slice(0, 10); //  if a habit has already been checked today it will disable the check button while rendering\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ToDoCardList col-md-8 offset-md-2\",\n    children: todos.map(todo => habit.last_checked.slice(0, 10) === today ? /*#__PURE__*/_jsxDEV(ToDoCard, {\n      id: habit.id,\n      username: habit.username,\n      title: habit.title,\n      habit_description: habit.habit_description,\n      streak_target: habit.streak_target,\n      max_streak: habit.max_streak,\n      attempt: habit.attempt,\n      current_counter: habit.current_counter,\n      last_checked: habit.last_checked,\n      deleteHabitById: deleteHabitById,\n      checkHabit: checkHabitById,\n      done: true\n    }, habit.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(ToDoCard, {\n      id: habit.id,\n      username: habit.username,\n      title: habit.title,\n      habit_description: habit.habit_description,\n      streak_target: habit.streak_target,\n      max_streak: habit.max_streak,\n      attempt: habit.attempt,\n      current_counter: habit.current_counter,\n      last_checked: habit.last_checked,\n      deleteHabitById: deleteHabitById,\n      checkHabit: checkHabitById,\n      done: false\n    }, habit.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ToDoCardList, \"01WIoX2yj63V4i4d1voc5WURd9Q=\");\n\n_c = ToDoCardList;\nexport default ToDoCardList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoCardList\");","map":{"version":3,"sources":["/Users/jaquelinecoelho/Desktop/good/habits-frontend/src/todos/ToDoCardList.js"],"names":["React","useContext","useState","UserContext","ToDoCard","todoApi","ToDoCardList","currentUser","setCurrentUser","todos","setToDos","habits","checked","setChecked","console","debug","deleteHabitById","id","removeHabit","username","filter","habit","success","errors","error","checkHabitById","data","res","checkHabit","log","updatedHabitId","findIndex","today","Date","toISOString","slice","map","todo","last_checked","title","habit_description","streak_target","max_streak","attempt","current_counter"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport UserContext from \"../auth/UserContext\";\nimport ToDoCard from \"./ToDoCard\";\nimport todoApi from \"../api/api\";\n\n// Show list of todo cards. habits= todos setHabits=set\n//  todoList -> todoCardList \n\nfunction ToDoCardList() {\n    const { currentUser, setCurrentUser } = useContext(UserContext);  \n    const [todos, setToDos] = useState(currentUser.habits);\n    const [checked, setChecked] = useState(false);  \n   \n    console.debug(\n        \"ToDoCardList\",\n        \"currentUser=\", currentUser,\n        \"todos=\", currentUser.habits,\n        \"checked=\", checked\n    );\n    \n\n    // remove a habit\n    async function deleteHabitById(id) {\n        try {\n            await todoApi.removeHabit(id, currentUser.username);\n            currentUser.habits = currentUser.habits.filter(habit => +habit.id !== +id);\n            setCurrentUser(currentUser);\n            setToDos(currentUser.habits);\n            return { success: true };\n\n        } catch (errors) {\n            console.error(\"habit deletion failed\", errors);\n            return { success: false, errors };\n        }\n        }\n    \n\n    // check a habit\n    async function checkHabitById(id, data) {\n        try {\n            let res = await todoApi.checkHabit(id, currentUser.username, data);\n            console.log(\"res in checkHabitById func\", res);\n            let updatedHabitId = currentUser.habits.findIndex(habit => +habit.id === +id);\n            currentUser.habits[updatedHabitId] = res;\n            setCurrentUser(currentUser);\n            setChecked(!checked);\n            return { success: true };\n\n        } catch (errors) {\n            console.error(\"todo check failed\", errors);\n            return { success: false, errors };\n        }\n        }\n\n    let today = new Date().toISOString().slice(0, 10);\n    //  if a habit has already been checked today it will disable the check button while rendering\n  return (\n      <div className=\"ToDoCardList col-md-8 offset-md-2\">\n        {todos.map(todo =>  (habit.last_checked.slice(0,10)) === today ? (\n            <ToDoCard\n                key={habit.id}\n                id={habit.id}\n                username={habit.username}\n                title={habit.title}\n                habit_description={habit.habit_description}\n                streak_target={habit.streak_target}\n                max_streak={habit.max_streak}\n                attempt={habit.attempt}\n                current_counter={habit.current_counter}\n                last_checked={habit.last_checked}\n                deleteHabitById={deleteHabitById}\n                checkHabit={checkHabitById}\n                done={true}\n            />) : \n            (\n            <ToDoCard\n                key={habit.id}\n                id={habit.id}\n                username={habit.username}\n                title={habit.title}\n                habit_description={habit.habit_description}\n                streak_target={habit.streak_target}\n                max_streak={habit.max_streak}\n                attempt={habit.attempt}\n                current_counter={habit.current_counter}\n                last_checked={habit.last_checked}\n                deleteHabitById={deleteHabitById}\n                checkHabit={checkHabitById}\n                done={false}\n            />  \n            )\n        )}\n      </div>\n  );\n}\n\nexport default ToDoCardList;"]},"metadata":{},"sourceType":"module"}