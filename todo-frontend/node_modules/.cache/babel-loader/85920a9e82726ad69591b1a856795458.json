{"ast":null,"code":"var _jsxFileName = \"/Users/jaquelinecoelho/Desktop/good/habits-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./routes-nav/Routes\";\nimport React, { useState, useEffect } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport todoApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt_decode from \"jwt-decode\"; // For storing token in localStorage \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TOKEN_STORAGE_ID = \"todo-token\";\n\nfunction App() {\n  _s();\n\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  console.debug(\"App\", \"infoLoaded=\", infoLoaded, \"currentUser=\", currentUser, \"token=\", token); // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = jwt_decode(token);\n          console.log(\"username in app\", username); // put the token on the Api class so it can use it to call the API.\n\n          todoApi.token = token;\n          let currentUser = await todoApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n\n      setInfoLoaded(true);\n    } // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n\n\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  async function signup(signupData) {\n    try {\n      let token = await todoApi.signup(signupData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  async function login(loginData) {\n    try {\n      let token = await todoApi.login(loginData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  } // Handles site-wide logout\n\n\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  } // hadle new todo creation\n\n\n  async function createNewToDo(inputData) {\n    try {\n      let newToDo = await todoApi.createHabit({\n        \"username\": currentUser.username,\n        \"title\": inputData.title,\n        \"habit_description\": inputData.habit_description\n      });\n      console.log(\"newHabit in createNewToDo\", newToDo);\n      currentUser.habits.push(newToDo);\n      setCurrentUser(currentUser);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"todo creation failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  if (!infoLoaded) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {\n          logout: logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          login: login,\n          signup: signup,\n          createNewToDo: createNewToDo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"r2zUiwL7+rY/nY4IxCQHgAfLP6I=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jaquelinecoelho/Desktop/good/habits-frontend/src/App.js"],"names":["BrowserRouter","Routes","React","useState","useEffect","useLocalStorage","Navigation","LoadingSpinner","todoApi","UserContext","jwt_decode","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","currentUser","setCurrentUser","token","setToken","console","debug","loadUserInfo","getCurrentUser","username","log","err","error","signup","signupData","success","errors","login","loginData","logout","createNewToDo","inputData","newToDo","createHabit","title","habit_description","habits","push"],"mappings":"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","sourcesContent":["import './App.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./routes-nav/Routes\";\nimport React, { useState, useEffect } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport todoApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt_decode from \"jwt-decode\";\n\n// For storing token in localStorage \nexport const TOKEN_STORAGE_ID = \"todo-token\";\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt_decode(token);\n          console.log(\"username in app\", username);\n          // put the token on the Api class so it can use it to call the API.\n          todoApi.token = token;\n          let currentUser = await todoApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  async function signup(signupData) {\n    try {\n      let token = await todoApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n  \n  async function login(loginData) {\n    try {\n      let token = await todoApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  // Handles site-wide logout\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  // hadle new todo creation\n  async function createNewToDo(inputData) {\n    try {\n      let newToDo = await todoApi.createHabit({\n        \"username\": currentUser.username, \n        \"title\": inputData.title,\n        \"habit_description\": inputData.habit_description,\n      });\n\n      console.log(\"newHabit in createNewToDo\", newToDo);\n      currentUser.habits.push(newToDo);\n      setCurrentUser(currentUser);\n      return { success: true };\n\n    } catch (errors) {\n      console.error(\"todo creation failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n    <BrowserRouter>\n      <UserContext.Provider\n          value={{ currentUser, setCurrentUser }}>\n        <div className=\"App\">\n          <Navigation logout={logout} />\n          <Routes \n            login={login} \n            signup={signup} \n            createNewToDo={createNewToDo} \n            />\n        </div>\n      </UserContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}