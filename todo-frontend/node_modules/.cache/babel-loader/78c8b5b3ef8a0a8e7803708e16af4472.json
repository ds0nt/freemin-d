{"ast":null,"code":"var _jsxFileName = \"/Users/jaquelinecoelho/Desktop/good/habits-frontend/src/habits/Quote.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport \"./Quote.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quote() {\n  _s();\n\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [quote, setQuote] = useState({});\n  useEffect(function loadQuote() {\n    console.debug(\"App useEffect loadQuote\");\n\n    async function getQuote() {\n      setInfoLoaded(true);\n\n      try {\n        let quoteRes = await axios.get(\"https://api.goprogram.ai/inspiration\");\n        setQuote(quoteRes.data);\n      } catch (err) {\n        console.error(\"App loadQuote: problem loading\", err);\n      }\n    } // set infoLoaded to false while async getQuote runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n\n\n    setInfoLoaded(false);\n    getQuote();\n  }, []);\n  if (!infoLoaded) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Quote col-md-8 offset-md-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"\\\"\", quote.quote, \"\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: [\"- \", quote.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quote, \"43+AYsx6KHYs5GRrU6jfzXknSUE=\");\n\n_c = Quote;\nexport default Quote;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quote\");","map":{"version":3,"sources":["/Users/jaquelinecoelho/Desktop/good/habits-frontend/src/habits/Quote.js"],"names":["useState","useEffect","LoadingSpinner","axios","Quote","infoLoaded","setInfoLoaded","quote","setQuote","loadQuote","console","debug","getQuote","quoteRes","get","data","err","error","author"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAO,aAAP;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AAEJC,EAAAA,SAAS,CAAC,SAASQ,SAAT,GAAqB;AAC3BC,IAAAA,OAAO,CAACC,KAAR,CAAc,yBAAd;;AAEA,mBAAeC,QAAf,GAA0B;AACtBN,MAAAA,aAAa,CAAC,IAAD,CAAb;;AACA,UAAI;AACA,YAAIO,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,sCAAV,CAArB;AACAN,QAAAA,QAAQ,CAACK,QAAQ,CAACE,IAAV,CAAR;AACH,OAHD,CAGE,OAAOC,GAAP,EAAY;AACVN,QAAAA,OAAO,CAACO,KAAR,CAAc,gCAAd,EAAgDD,GAAhD;AACH;AACJ,KAX0B,CAY3B;AACA;AACA;;;AACAV,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAM,IAAAA,QAAQ;AACP,GAjBI,EAiBF,EAjBE,CAAT;AAmBI,MAAI,CAACP,UAAL,EAAiB,oBAAO,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEjB,sBACI;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA,4BACI;AAAA,uBAAME,KAAK,CAACA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,6BAAG;AAAA,yBAAMA,KAAK,CAACW,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA/BQd,K;;KAAAA,K;AAiCT,eAAeA,KAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport \"./Quote.css\"\n\nimport axios from \"axios\";\n\nfunction Quote() {\n    const [infoLoaded, setInfoLoaded] = useState(false);\n    const [quote, setQuote] = useState({});\n\nuseEffect(function loadQuote() {\n    console.debug(\"App useEffect loadQuote\");\n    \n    async function getQuote() {\n        setInfoLoaded(true);\n        try {\n            let quoteRes = await axios.get(\"https://api.goprogram.ai/inspiration\");\n            setQuote(quoteRes.data);\n        } catch (err) {\n            console.error(\"App loadQuote: problem loading\", err);\n        }\n    }\n    // set infoLoaded to false while async getQuote runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getQuote();\n    }, []);\n\n    if (!infoLoaded) return <LoadingSpinner />;\n\n    return (\n        <div className=\"Quote col-md-8 offset-md-2\">\n            <h5>\"{quote.quote}\"</h5>\n            <p><i>- {quote.author}</i></p>            \n        </div>\n    )\n}\n\nexport default Quote;"]},"metadata":{},"sourceType":"module"}