{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3007\"; // API Class  that contains helper methods with AJAX calls\n\nclass todoApi {\n  // the token for interactive with the API will be stored here.\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method); // token is passed in the header\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${todoApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n  // Get user details by username\n\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  } // Get token for login from username, password.\n\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  } // Signup for site.\n\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  } // Create a new todo\n\n\n  static async createTodo(data) {\n    let res = await this.request(`todos/${data.username}`, data, \"post\");\n    return res.todo;\n  } // Update an id-todo\n\n\n  static async getTodo(id, username) {\n    let res = await this.request(`todos/${username}/${id}`);\n    return res.todo;\n  } // Update an todo-id\n\n\n  static async updateTodo(id, username, data) {\n    let res = await this.request(`todos/${username}/${id}`, data, \"patch\");\n    return res.todo;\n  } // Checked an id-Todo\n\n\n  static async checkTodo(id, username, data) {\n    console.log(\"update id-todo in API, id =\", id, \"username=\", username, \"data=\", data);\n    let res = await this.request(`todos/${username}/${id}/checked`, data, \"patch\");\n    console.log(\"result after update in API\", res.todo);\n    return res.todo;\n  } // Delete a todo by id\n\n\n  static async removeTodo(id, username) {\n    await this.request(`todos/${username}/${id}`, {}, \"delete\");\n  }\n\n}\n\nexport default todoApi;","map":{"version":3,"sources":["/Users/jaquelinecoelho/Desktop/good/todo-frontend/src/api/api.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","todoApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCurrentUser","username","res","user","login","signup","createTodo","todo","getTodo","id","updateTodo","checkTodo","log","removeTodo"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3007\";\n\n// API Class  that contains helper methods with AJAX calls\n\n\nclass todoApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    // token is passed in the header\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${todoApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  \n  // Get user details by username\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  // Get token for login from username, password.\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  // Signup for site.\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  // Create a new todo\n  static async createTodo(data) {\n    let res = await this.request(`todos/${data.username}`, data, \"post\");\n    return res.todo;\n  }\n\n  // Update an id-todo\n  static async getTodo(id, username) {\n    let res = await this.request(`todos/${username}/${id}`);\n    return res.todo;\n  }\n\n  // Update an todo-id\n  static async updateTodo(id, username, data) {\n    let res = await this.request(`todos/${username}/${id}`, data, \"patch\");\n    return res.todo;\n  }\n\n  // Checked an id-Todo\n  static async checkTodo(id, username, data) {\n    console.log(\"update id-todo in API, id =\", id , \"username=\", username, \"data=\", data);\n    let res = await this.request(`todos/${username}/${id}/checked`, data, \"patch\");\n    console.log(\"result after update in API\", res.todo);\n    return res.todo;\n  }\n\n  // Delete a todo by id\n  static async removeTodo(id, username) {\n    await this.request(`todos/${username}/${id}`, {}, \"delete\");\n  }\n\n}\n\n\nexport default todoApi;"]},"metadata":{},"sourceType":"module"}