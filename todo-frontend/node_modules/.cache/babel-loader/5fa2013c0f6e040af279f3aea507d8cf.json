{"ast":null,"code":"var _jsxFileName = \"/Users/jaquelinecoelho/Desktop/good/todo-frontend/src/todos/ToDoCardList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport UserContext from \"../auth/UserContext\";\nimport ToDoCard from \"./ToDoCard\";\nimport todoApi from \"../api/api\"; // Show list of todo cards. \n//  todoList -> todoCardList \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToDoCardList() {\n  _s();\n\n  const {\n    currentUser,\n    setCurrentUser\n  } = useContext(UserContext);\n  const [todos, setToDos] = useState(currentUser.todos);\n  const [checked, setChecked] = useState(false);\n  console.debug(\"ToDoCardList\", \"currentUser=\", currentUser, \"todos=\", currentUser.todos, \"checked=\", checked); // remove a todo\n\n  async function deleteTodoById(id) {\n    try {\n      await todoApi.removeTodo(id, currentUser.username);\n      currentUser.todos = currentUser.todos.filter(todo => +todo.id !== +id);\n      setCurrentUser(currentUser);\n      setToDos(currentUser.todos);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"todo deletion failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  } // check a todo\n\n\n  async function checkTodoById(id, data) {\n    try {\n      let res = await todoApi.checkHabit(id, currentUser.username, data);\n      console.log(\"res in checkTodoById func\", res);\n      let updatedTodoId = currentUser.todos.findIndex(todo => +todo.id === +id);\n      currentUser.todos[updatedTodoId] = res;\n      setCurrentUser(currentUser);\n      setChecked(!checked);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"todo check failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n  /* let today = new Date().toISOString().slice(0, 10); */\n  //  if a todo has already been checked today it will disable the check button while rendering\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ToDoCardList col-md-8 offset-md-2\",\n    children: todos.map(todo => /*#__PURE__*/_jsxDEV(ToDoCard, {\n      id: todo.id,\n      username: todo.username,\n      title: todo.title,\n      habit_description: todo.habit_description,\n      deleteTodoById: deleteTodoById,\n      checkTodo: checkTodoById,\n      done: false\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ToDoCardList, \"fRRl32UOSherct2Xd0MNHhMVSTk=\");\n\n_c = ToDoCardList;\nexport default ToDoCardList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoCardList\");","map":{"version":3,"sources":["/Users/jaquelinecoelho/Desktop/good/todo-frontend/src/todos/ToDoCardList.js"],"names":["React","useContext","useState","UserContext","ToDoCard","todoApi","ToDoCardList","currentUser","setCurrentUser","todos","setToDos","checked","setChecked","console","debug","deleteTodoById","id","removeTodo","username","filter","todo","success","errors","error","checkTodoById","data","res","checkHabit","log","updatedTodoId","findIndex","map","title","habit_description"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport UserContext from \"../auth/UserContext\";\nimport ToDoCard from \"./ToDoCard\";\nimport todoApi from \"../api/api\";\n\n// Show list of todo cards. \n//  todoList -> todoCardList \n\nfunction ToDoCardList() {\n    const { currentUser, setCurrentUser } = useContext(UserContext);  \n    const [todos, setToDos] = useState(currentUser.todos);\n    const [checked, setChecked] = useState(false);  \n   \n    console.debug(\n        \"ToDoCardList\",\n        \"currentUser=\", currentUser,\n        \"todos=\", currentUser.todos,\n        \"checked=\", checked\n    );\n    \n\n    // remove a todo\n    async function deleteTodoById(id) {\n        try {\n            await todoApi.removeTodo(id, currentUser.username);\n            currentUser.todos = currentUser.todos.filter(todo => +todo.id !== +id);\n            setCurrentUser(currentUser);\n            setToDos(currentUser.todos);\n            return { success: true };\n\n        } catch (errors) {\n            console.error(\"todo deletion failed\", errors);\n            return { success: false, errors };\n        }\n        }\n    \n\n    // check a todo\n    async function checkTodoById(id, data) {\n        try {\n            let res = await todoApi.checkHabit(id, currentUser.username, data);\n            console.log(\"res in checkTodoById func\", res);\n            let updatedTodoId = currentUser.todos.findIndex(todo => +todo.id === +id);\n            currentUser.todos[updatedTodoId] = res;\n            setCurrentUser(currentUser);\n            setChecked(!checked);\n            return { success: true };\n\n        } catch (errors) {\n            console.error(\"todo check failed\", errors);\n            return { success: false, errors };\n        }\n        }\n\n   /* let today = new Date().toISOString().slice(0, 10); */\n    //  if a todo has already been checked today it will disable the check button while rendering\n  return (\n      <div className=\"ToDoCardList col-md-8 offset-md-2\">\n      {todos.map(todo =>  \n     \n            <ToDoCard\n                key={todo.id}\n                id={todo.id}\n                username={todo.username}\n                title={todo.title}\n                habit_description={todo.habit_description}\n                deleteTodoById={deleteTodoById}\n                checkTodo={checkTodoById}\n                done={false}\n            />  )}\n        </div>\n  ); \n}\n\nexport default ToDoCardList;"]},"metadata":{},"sourceType":"module"}